     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 5B9D                        a dw 1001110101011011b
    14 00000002 CAD3                        b dw 1101001111001010b
    15 00000004 00000000                    c dd 0b
    16                                      ;=>1001110101011011 0101011 001010 011(baza2) = 9D5B5651(baza16)
    17                                  ; our code starts here
    18                                  segment code use32 class=code
    19                                      start:
    20 00000000 668B15[00000000]                mov dx,[a]  ; =>ax primele 16 cifre din c vor fi ca si ale lui a
    21                                          ; => in dx am prima parte a numarului
    22                                          
    23 00000007 668B1D[00000000]                mov bx,[a]
    24 0000000E 66B80000                        mov ax,0; pt ultimii 16 biti
    25                                          ;facem masca pt cifrele pe care vrem sa le folosim
    26 00000012 6681E30070                      and bx, 0111000000000000b ; bx = 000000000000(a12)(a13)(a14)0
    27                                          ;mutam cifrele pe pozitiile care ne trebuie
    28 00000017 66C1EB0C                        shr bx,12 ;bx = 0000000000000(a12)(a13)(a14)
    29 0000001B 6609D8                          or ax,bx ; salvam in ax partea 2
    30                                          
    31 0000001E 668B1D[02000000]                mov bx,[b]
    32 00000025 6683E33F                        and bx,0000000000111111b
    33 00000029 66C1E303                        shl bx,3
    34 0000002D 6609D8                          or ax,bx ; am pus si urmatoarele 5 cifre
    35                                          
    36 00000030 668B1D[00000000]                mov bx,[a]
    37 00000037 6681E3F803                      and bx,0000001111111000b 
    38 0000003C 66C1E306                        shl bx,6 
    39 00000040 6609D8                          or ax,bx ; am pus si urmatoarele 7 cifre
    40                                          ; => ax partea a doua a nr
    41                                          ;=> NR E PE DX:AX
    42                                          
    43                                          ;mutarea rezultatului in c
    44 00000043 6652                            push dx
    45 00000045 6650                            push ax
    46 00000047 58                              pop eax
    47                                    
    48 00000048 A3[04000000]                    mov dword[c],eax 
    49                                          
    50                                          
    51                                          
    52                                          ; exit(0)
    53 0000004D 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    54 0000004F FF15[00000000]                  call    [exit]       ; call exit to terminate the program
