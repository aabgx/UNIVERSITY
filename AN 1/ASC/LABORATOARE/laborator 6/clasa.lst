     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 0CFFFE0F0A                  a db 12, -1, -2, 15, 10          ; ESI
    14                                      ; a in memorie:
    15                                      ;0c     FF    FE    0F    0A    FF  FE                0f   0a
    16                                   ;a   0     1      2     3     4  b 0  1   2    3   4   c 0    1   2   3  4
    17                                      lena equ $-a   ; 5
    18 00000005 00<rept>                    b times lena db 0 ; nr negative din a    ; EDI
    19 0000000A 00<rept>                    c times lena db 0; pozitive div cu 5     ; EBP
    20 0000000F 05                          cinci db 5
    21                                  
    22                                  ; our code starts here
    23                                  segment code use32 class=code
    24                                      start:
    25 00000000 BE00000000                      mov esi, 0
    26 00000005 BF00000000                      mov edi,0
    27 0000000A BD00000000                      mov ebp,0
    28 0000000F B905000000                      mov ecx, lena
    29                                          repeta:
    30 00000014 8A9E[00000000]                      mov bl, [a+esi]
    31 0000001A 80FB00                              cmp bl, 0
    32 0000001D 7C02                                JL negativ
    33 0000001F 7D0A                                JGE pozitiv
    34                                              
    35                                              negativ:
    36 00000021 889F[05000000]                          mov [b+edi], bl
    37 00000027 47                                      inc edi ; add edi, 1
    38 00000028 46                                      inc esi 
    39                                                  
    40 00000029 EB1C                                JMP finalrepeta
    41                                              
    42                                              
    43                                              pozitiv:
    44 0000002B 88D8                                    mov al, bl
    45 0000002D B400                                    mov ah, 0
    46 0000002F F635[0F000000]                          div byte[cinci] ; al - catul si ah restul
    47 00000035 80FC00                                  cmp ah, 0
    48 00000038 7402                                    JE divizibil
    49 0000003A 750A                                    JNE nedivizibil
    50                                                      divizibil:
    51 0000003C 889D[0A000000]                                  mov [c+ebp], bl
    52 00000042 45                                              inc ebp
    53 00000043 46                                              inc esi
    54 00000044 EB01                                    jmp finalrepeta
    55                                                      nedivizibil:
    56 00000046 46                                              inc esi
    57                                             finalrepeta:
    58 00000047 E2CB                            loop repeta
    59                                      
    60                                          ; exit(0)
    61 00000049 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    62 0000004B FF15[00000000]                  call    [exit]       ; call exit to terminate the program
