     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                  ;   Write a program to compute the E expression with the following variables
    15                                  ;   a-word, b-byte, c-word, d-doubleword
    16                                  ;   0ABh - c + (a + 1011b - b) - d + 5
    17 00000000 0C00                        a dw 12
    18 00000002 0300                        b dw 3
    19 00000004 0100                        c dw 1
    20 00000006 0A000000                    d dd 10
    21 0000000A 0700000000000000            x dq 7
    22                                      
    23                                      ;declarare constante (un nume alocat valorilor constante)
    24                                      ;directiva EQU
    25                                      consth EQU 0ABh
    26                                      constb EQU 1011b
    27                                      constd EQU 5
    28                                      
    29                                      
    30                                      
    31                                  ; our code starts here
    32                                  segment code use32 class=code
    33                                      start:
    34                                          ; (a + 1011b - b)
    35 00000000 66A1[00000000]              mov ax, [a]
    36 00000006 6683C00B                    add ax, constb  ; ax=a+1011b (pot aduna const la un registru)
    37                                      
    38                                      ;ax= a + 1011b - 1word (16 biti)
    39                                      ; -b byte (8 biti)
    40                                      ; trebuie sa il convertim pe b la word
    41 0000000A 660FB61D[02000000]          movzx bx,[b] ;->se extinde b in bx (zx - move with 0 extended - registrul la stanga si ce vrem sa mutam la dreapta)
    42 00000012 6629D8                      sub ax,bx ; ax = (a + 1011b - b)
    43                                      
    44                                      ; 0ABh - c
    45 00000015 66BBAB00                    mov bx,consth
    46 00000019 662B1D[04000000]            sub bx,[c] ;bx = 0ABh - c
    47                                      
    48                                      ;0ABh - c + (a + 1011b - b)
    49 00000020 6601C3                      add bx,ax ; bx = 0ABh - c + (a + 1011b - b)
    50                                      
    51                                      ;convertim pe bx la ebx
    52 00000023 0FB7DB                      movzx EBX, BX ; ebx=0ABh - c + (a + 1011b - b)
    53                                      
    54 00000026 2B1D[06000000]              sub ebx,[d] ; ebx= 0ABh - c + (a + 1011b - b)-d
    55 0000002C 83C305                      add ebx, constd ; ebx=0ABh - c + (a + 1011b - b)-d+5
    56                                      
    57                                      
    58                                      ;++++++ suplimentar 0ABh - c + (a + 1011b - b)-d+5 - X(quadword)
    59                                      ; edx:eax
    60                                      ; ecx:ebx
    61                                      ;extindem pe ebx la combinatia de registrii ecx:ebx pt a efectua scaderea cu qw
    62 0000002F B900000000                  mov ecx,0
    63                                      ; ecx:ebx=0ABh - c + (a + 1011b - b)-d+5
    64                                      ;X quadword
    65                                      
    66 00000034 2B1D[0A000000]              sub ebx, dword[x+0]
    67 0000003A 1B0D[0E000000]              sbb ecx, [x+4]
    68                                      ;rez final al expresiei este in ecx:ebx
    69                                      
    70                                      
    71                                          ; exit(0)
    72 00000040 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    73 00000042 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
