1.
#include <iostream>
#include <fstream>
#include <vector>
#include <set>
using namespace std;
ifstream f("in.txt");
ofstream g("out.txt");

int n;
vector <int> parinte,nr_succesori,k;
set <int> frunze;

int main()
{
	f>>n;
	nr_succesori.resize(n+1);
	parinte.resize(n+1);
	for(int i=0; i<n; i++)
	{
		f>>parinte[i];
		if(parinte[i]!=-1) 
			nr_succesori[parinte[i]]++;
	}
	for(int i=0; i<n; i++)
		if(nr_succesori[i]==0)
			frunze.insert(i);
	while(frunze.size()>0)
	{
		int f=*frunze.begin();
		frunze.erase(frunze.begin());
		if(parinte[f]!=-1)
		{
			int pr=parinte[f];
			k.push_back(pr);
			nr_succesori[pr]--;
			if(nr_succesori[pr]==0)
				frunze.insert(parinte[f]);
		}

	}
	g<<k.size()<<endl;
	for(int i=0; i<k.size(); i++)
		g<<k[i]<<" ";
	g<<endl;
	f.close();
	g.close();
	return 0;
}











2.
#include <iostream>
#include <fstream>
#include <map>
#include <vector>
#include <queue>
using namespace std;
ifstream f("in.txt");
ofstream g("out.txt");
vector <int> parinte;
queue <int> coada;
map <int,int> nu_exista;
map <int,int> nrAparitii;

int main()
{
	int n,m,x,y;
	f>>m;
	n=m+1;
	parinte.resize(n);
	for(int i=0; i<n; i++)
	{
		parinte[i]=-1;
		nu_exista[i]=0;
	}
	for(int i=0; i<m; i++)
	{
		f>>x;
		coada.push(x);
		nu_exista.erase(x);
		nrAparitii[x]++;
	}
	for(int i=0; i<m; i++)
	{
		x=coada.front();
		coada.pop();
		y=(*nu_exista.begin()).first;
		if (nrAparitii[x]==1)
			{
			nrAparitii.erase(x);
			nu_exista[x]=1;
			}
		else 
			nrAparitii[x]--;
		nrAparitii[y]++;
		nu_exista.erase(y);
		parinte[y]=x;
	}
	g<<n<<endl;
	for(int i=0; i<n; i++)
		g<<parinte[i]<<" ";
	f.close();
	g.close();
	return 0;
}









3.
#include <iostream>
#include <fstream>
#include <string>
#include <algorithm>
#include <queue>
using namespace std;
ifstream f("in.txt");
ofstream g("out.txt");
string s,cod[128];
int fr[128];


struct Nod{
	int lt,rt,nr_ap;
	char c;
}arbore[255];


void codare(int a,string c)
{
	Nod &nod=arbore[a];
	if(nod.lt==-1 && nod.rt==-1)
		cod[(int)nod.c]=c;
	else 
	{
		codare(nod.lt,c+'0');
		codare(nod.rt,c+'1');
	}
}


int main()
{
	int n=0,q=0;
	auto cmp=[](int lhs, int rhs) 
	{ 
		return arbore[lhs].nr_ap>arbore[rhs].nr_ap || (arbore[lhs].nr_ap==arbore[rhs].nr_ap && arbore[lhs].c>arbore[rhs].c); 
	};
	priority_queue<int, vector<int>, decltype(cmp)> pq(cmp);
	//citim si identificam caracterele si numaram frecventa
	getline(f,s);
	for(auto c:s)
	{
		if(fr[(int)c]==0) n++;
		fr[(int)c]++;
	}
	g<<n<<endl;
	//punem toate nodurile existente intr-o coada cu prioritati
	for(int c=0; c<128; c++)
	{
		if(fr[c]!=0)
		{
			g<<(char)c<<" "<<fr[c]<<endl;
			Nod &nod=arbore[q];
			nod.c=(char)c;
			nod.lt=nod.rt=-1;
			nod.nr_ap=fr[c];
			pq.push(q); q++;
		}
	}
	//construim arborele
	while(pq.size()>=2)
	{
		auto lt=pq.top(); pq.pop();
		auto rt=pq.top(); pq.pop();

		Nod &nod=arbore[q];
		nod.nr_ap=arbore[lt].nr_ap+arbore[rt].nr_ap;
		nod.c=min(arbore[lt].c,arbore[rt].c);
		nod.lt=lt;
		nod.rt=rt;
		pq.push(q); q++;
	}
	//parcurgem arborele si generam codul fiecarui caracter lipind la
	//vectorul de string-uri 0 si 1
	codare(q-1,"");
	for(auto c:s)
		g<<cod[(int)c];
	f.close();
	g.close();
	return 0;
}









4.
#include <iostream>
#include <fstream>
#include <string>
#include <algorithm>
#include <queue>
using namespace std;
ifstream f("in.txt");
ofstream g("out.txt");
string s,linie;


struct Nod{
	int lt,rt,nr_ap;
	char c;
}arbore[255];


char decodare(int a,int &k)
{
	Nod &nod=arbore[a];
	if(nod.lt==-1 && nod.rt==-1)
		return nod.c;
	else 
	{
		char ch=s[k];
		k++;
		if(ch=='0') return decodare(nod.lt,k);
		else if(ch=='1') return decodare(nod.rt,k);
		else return 0;
	}
}


int main()
{
	auto cmp=[](int lhs, int rhs) { return arbore[lhs].nr_ap>arbore[rhs].nr_ap || (arbore[lhs].nr_ap==arbore[rhs].nr_ap && arbore[lhs].c>arbore[rhs].c); };
	priority_queue<int, vector<int>, decltype(cmp)> pq(cmp);
	int n,k=0,q=0; 
	f>>n;
	for(int i=0; i<n; ++i)
	{
		Nod &nod=arbore[q];
		nod.lt=nod.rt=-1;
		getline(f,linie);
		nod.c=f.get();
		f.get();
		f>>nod.nr_ap;
		pq.push(q); q++;
	}
	//construim arborele
	while(pq.size()>=2)
	{
		auto lt=pq.top(); pq.pop();
		auto rt=pq.top(); pq.pop();

		Nod &nod=arbore[q];
		nod.nr_ap=arbore[lt].nr_ap+arbore[rt].nr_ap;
		nod.c=min(arbore[lt].c,arbore[rt].c);
		nod.lt=lt;
		nod.rt=rt;
		pq.push(q); q++;
	}
	f>>s;
	while(k<s.size())
		g<<decodare(q-1,k);
	f.close();
	g.close();
	return 0;
}










5.
#include <iostream>
#include <algorithm>
#include <vector>
#include <fstream>
using namespace std;
ifstream f("in.txt");
ofstream g("out.txt");


const int N=1e5;
int cost_minim,cost_sortare[N+1],comp_conexa[N+1];
vector <int> arbore;
int x[N+1],y[N+1],c[N+1];


bool cmp(int i,int j)
{
	return (c[i]<c[j]);
}


int grupa(int i)
{
	if(comp_conexa[i]==i)
		return i;
	comp_conexa[i]=grupa(comp_conexa[i]);
	return comp_conexa[i];
}


void reuniune(int i,int j)
{
	comp_conexa[grupa(i)]=grupa(j);
}


void Kruskal(int n,int m)
{
	for(int i=0; i<n; i++)
		comp_conexa[i]=i;
	sort(cost_sortare,cost_sortare+m,cmp);
	for(int i=0; i<m; i++)
	{
		if(grupa(x[cost_sortare[i]])!=grupa(y[cost_sortare[i]]))
		{
			cost_minim=cost_minim+c[cost_sortare[i]];
			reuniune(x[cost_sortare[i]],y[cost_sortare[i]]);
			arbore.push_back(cost_sortare[i]);
		}
	}
}


int main()
{
	int n,m;
	f>>n>>m;
	for(int i=0; i<m; i++)
	{
		f>>x[i]>>y[i]>>c[i];
		cost_sortare[i]=i;
	}
	Kruskal(n,m);
	sort(arbore.begin(), arbore.end());
	g<<cost_minim<<endl;
	g<<n-1<<endl;
	for(int i=0; i<n-1; i++)
		g<<x[arbore[i]]<<" "<<y[arbore[i]]<<endl;
	f.close();
	g.close();
	return 0;
}
