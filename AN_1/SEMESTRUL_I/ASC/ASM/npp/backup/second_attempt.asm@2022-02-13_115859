;sir de dwords, ia bytes high din fiecare word si creaza word nou
;nr valorile de 1 si afiseaza pe ecran in baza 10
bits 32 ; assembling for the 32 bits architecture

; declare the EntryPoint (a label defining the very first instruction of the program)
global start        

; declare external functions needed by our program
extern exit,printf               ; tell nasm that exit exists even if we won't be defining it
import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
import printf msvcrt.dll                          ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions

; our data is declared here (the variables needed by our program)
segment data use32 class=data
    words times 10 dw -1
    s dd 12345678h,11223344h,55667788h
    lens equ $-s
    copie dd -1
    suma db 0
    format_d db '%d',0
    

; our code starts here
segment code use32 class=code
    start:
    
        mov esi,s
        mov ecx,lens/2 ;adica cate words sunt in sir
        mov edi, words
        
        repeta:
        
        lodsw
        mov byte[edi],ah
        inc edi
        
        loop repeta
        
        ; acum in edi avem, in memorie 56|12|33|11|77|55 deci cand vom scoate words se vor inversa bytes
        
        ;numaram valorile de 1 cu shr
        mov ecx,lens/4 ;avem words cati dwords erau la inceput
        mov esi,words
        
        repeta1:
           mov [copie],ecx
           mov ecx,16 ; cati biti sunt de verificat la fiecare words
           lodsw
           
           repeta2:
           
           shr ax,1
           adc byte[suma],0
           
           loop repeta2
           
           mov ecx,[copie]
            
        loop repeta1
        
        mov eax,0
        mov al,byte[suma]
        ;printf(format,variabile)
        push dword eax
        push dword format_d
        call [printf]
        add esp,4*2
        

    
        ; exit(0)
        push    dword 0      ; push the parameter for exit onto the stack
        call    [exit]       ; call exit to terminate the program
