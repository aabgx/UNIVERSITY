# merge doar pt o singura pereche
def suma_coordonate_nu(mtx):

    # citire coordonate finale
    a1 = int(input("a1: "))
    b1 = int(input("b1: "))
    a2 = int(input("a2: "))
    b2 = int(input("b2: "))

    suma = 0

    for i in range(a1, a2 + 1):
        for j in range(b1, b2 + 1):
            suma += mtx[i][j]

    print(suma)


# daca nr de perechi e mult mai mare
# facem suma pe linii si coloane
def creare_matrice_suma(mtx):
    linii = len(mtx)
    coloane = len(mtx[0])

    rez = [[mtx[0][0]]]  # primul element e la fel mereu

    for i in range(1, coloane):
        rez[0].append(mtx[0][i] + rez[0][i - 1])

    for j in range(1, linii):
        rez.append([mtx[j][0] + rez[j - 1][0]])

    for i in range(1, linii):
        for j in range(1, coloane):
            rez[i].append(rez[i - 1][j] + rez[i][j - 1] - rez[i - 1][j - 1] + mtx[i][j])
    return rez


def iterare_inidici(mtx, lst):
    rez = []
    matrice_suma = creare_matrice_suma(mtx)
    for i in lst:
        suma_crt = 0
        a1 = i[0][0]
        b1 = i[0][1]
        a2 = i[1][0]
        b2 = i[1][1]

        suma_crt = matrice_suma[a2][b2]
        # trebe sa scad dreptunghiurile si sa adun inapoi un patrat ce-l scad de 2 ori
        if a1 > 0 and a2 > 0:
            suma_crt -= matrice_suma[a1 - 1][b2]
            suma_crt -= matrice_suma[a2][b1 - 1]
            suma_crt += matrice_suma[a1 - 1][b1 - 1]

        # print(suma_crt)
        rez.append(suma_crt)

    return rez


iterare_inidici(
    [
        [0, 2, 5, 4, 1],
        [4, 8, 2, 3, 7],
        [6, 3, 4, 6, 2],
        [7, 3, 1, 8, 3],
        [1, 5, 7, 9, 4],
    ],
    [[[1, 1], [3, 3]], [[2, 2], [4, 4]]],
)

# def suma_coordonate(mtx):
assert iterare_inidici(
    [
        [0, 2, 5, 4, 1],
        [4, 8, 2, 3, 7],
        [6, 3, 4, 6, 2],
        [7, 3, 1, 8, 3],
        [1, 5, 7, 9, 4],
    ],
    [[[1, 1], [3, 3]], [[2, 2], [4, 4]]],
) == [38, 44]
